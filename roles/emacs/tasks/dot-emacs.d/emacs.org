#+TITLE: My Emacs configuration file
#+AUTHOR: Joris Vankerschaver
#+EMAIL: joris.vankerschaver@gmail.com
#+STARTUP: showall


* Generic Emacs

** Package management

 #+BEGIN_SRC emacs-lisp
   (require 'package)

   (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                            ("gnu"       . "http://elpa.gnu.org/packages/")
                            ("melpa"     . "http://melpa.org/packages/")))


   (package-initialize)
   (package-refresh-contents)
#+END_SRC


** use-package

   [[https://github.com/jwiegley/use-package][use-package]] is a package to tidy up your .emacs configuration. It allows you
   to run code before or after a package is loaded, set up key bindings for
   modes, in a neat and concise declarative manner.

 #+BEGIN_SRC emacs-lisp
   (eval-when-compile
      (require 'use-package))
 #+END_SRC



** Emacs core


*** Emacs server

Start the Emacs server upon startup.

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

*** User details

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Joris Vankerschaver"
      user-email-address "Joris.Vankerschaver@gmail.com")
#+END_SRC

*** Emacs customizations

Turn off all the fluff: no splash screen, short y/n answer format instead of
the default yes/no, no tool bar, etc.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format "Emacs: %f")
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable C-x C-c to quit emacs, since it is too easy to hit those keys by
mistake. To quit Emacs, use an explicit M-x ~kill-emacs~.

#+BEGIN_SRC emacs-lisp
  (defun disable-exit-keys ()
  (interactive)
    (message "To exit emacs, use M-x kill-emacs"))
  (global-set-key (kbd "C-x C-c") 'disable-exit-keys)
#+END_SRC

Show Emacs with a slightly larger screen. I should probably retire this and
have the window manager take care of this instead.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  
    ;; (when (display-graphic-p)
    ;;     (if (> (x-display-pixel-width) 1280)
    ;;         (add-to-list 'default-frame-alist (cons 'width 100))
    ;;       (add-to-list 'default-frame-alist (cons 'width 80))))
#+END_SRC

By default Emacs creates backups in the current directory. Create them in a
hidden directory instead, so they're out of the way.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC


** Packages

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    (("C-:"   . avy-goto-char)     ;; Quickly jump to a character
     ("C-'"   . avy-goto-char-2)   ;; Quickly jump to a sequence of two characters
     ("M-g f" . avy-goto-line)     ;; Quickly jump to a line
     ("M-g w" . avy-goto-word-1))  ;; Quickly jump to the beginning of a word
    :config
    (setq avy-background t)        ;; Dim background during selection
    (setq avy-style 'at-full))     ;; Highlight style for avy (e.g., 'at-full', 'at', etc.)
#+END_SRC

*** ace-window

Keybindings to easily and intuitively switch windows.

| Key | Action                                       |
|-----+----------------------------------------------|
| x   | Delete window                                |
| m   | Swap windows                                 |
| M   | Move window                                  |
| c   | Copy window                                  |
| j   | Select buffer                                |
| n   | Select the previous window                   |
| u   | Select buffer in the other window            |
| c   | Split window fairly, vertically/horizontally |
| v   | Split window vertically                      |
| b   | Split window horizontally                    |
| o   | Maximize current window                      |
| ?   | Show these command bindings                  |

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . ace-window)))
#+END_SRC

*** ace-isearch

Refer to windows by number.

| M-o <num>         | Jump to window <num>            |
| C-u M-o <num>     | Switch current window and <num> |
| C-u C-u M-o <num> | Delete window <num>             |

I prefer M-o x for delete, M-o w for swap, 

#+BEGIN_SRC emacs-lisp
  ;; (use-package ace-isearch
  ;;   :ensure t
  ;;   :init
  ;;   (setq enable-recursive-minibuffers t)
  ;;   (minibuffer-depth-indicate-mode 1)
  ;;   :bind (("M-o" . ace-window)))
#+END_SRC

*** undo-tree

Represent successive undos and redos as a tree, which can be navigated with the
up and down arrow keys.

 #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :ensure t
     :init
     (progn
       (global-undo-tree-mode)
       (setq undo-tree-visualizer-timestamps t)
       (setq undo-tree-visualizer-diff t)))
 #+END_SRC

** The rest

#+BEGIN_SRC emacs-lisp
  (setq emacs-config-files '("theme.org"
                             "org-mode.org"
                             "coding.org"))

  (dolist (file emacs-config-files)
    (org-babel-load-file
     (file-truename
      (expand-file-name file user-emacs-directory))))
#+END_SRC




