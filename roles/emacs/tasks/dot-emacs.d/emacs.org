#+TITLE: My Emacs configuration file
#+AUTHOR: Joris Vankerschaver
#+EMAIL: joris.vankerschaver@gmail.com
#+STARTUP: showall

- Run `cask install` from within .emacs.d folder.
- From within Emacs, run "M-x jedi:install-server"
   (uses system Python by default; needs virtualenv)


* Generic Emacs


** Package management

 #+BEGIN_SRC emacs-lisp
 (require 'cask (expand-file-name "~/.cask/cask.el"))
 (cask-initialize)
 (require 'pallet)
 (pallet-mode t)
 #+END_SRC


** Emacs core


*** Emacs server

Start the Emacs server upon startup.

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

*** User details

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Joris Vankerschaver"
      user-email-address "Joris.Vankerschaver@gmail.com")
#+END_SRC

*** Emacs customizations

Turn off all the fluff: no splash screen, short y/n answer format instead of
the default yes/no, no tool bar, etc.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format "Emacs: %f")
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable C-x C-c to quit emacs, since it is too easy to hit those keys by
mistake. To quit Emacs, use an explicit M-x ~kill-emacs~.

#+BEGIN_SRC emacs-lisp
(defun disable-exit-keys ()
  (message "To exit emacs, use M-x kill-emacs"))
(global-set-key (kbd "C-x C-c") 'disable-exit-keys)
#+END_SRC

Show Emacs with a slightly larger screen. I should probably retire this and
have the window manager take care of this instead.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (if (> (x-display-pixel-width) 1280)
      (add-to-list 'default-frame-alist (cons 'width 100))
    (add-to-list 'default-frame-alist (cons 'width 80))))
#+END_SRC

By default Emacs creates backups in the current directory. Create them in a
hidden directory instead, so they're out of the way.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Add ~/usr/local/bin~ for and ~\~/local/bin~ for locally installed utilities.

#+BEGIN_SRC emacs-lisp
  ;; (setq exec-path
  ;;       (append exec-path
  ;;               '("/usr/local/bin/")
  ;;               '((expand-file-name "~/local/bin/"))))
#+END_SRC

*** Visual mode

Visual line mode turns on line wrapping and causes simple editing commands
to act on visual lines, rather than logical lines.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

*** Line numbers

Show line numbers in the status line, show column numbers as well, and set the
fill column (the column beyond which line wrapping should happen) to
something sensible for coding.

#+BEGIN_SRC emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
(setq-default fill-column 79)
#+END_SRC

Automatically add a newline on the last line when there is none.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

*** CUA mode

Enable [[https://www.emacswiki.org/emacs/CuaMode][CUA mode]] (Common User Access), allows for more flexible selections,
rectangle selection using C-RET, easy access to registers, and more. It comes
bundled with Emacs.

Some useful [[http://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html#CUA-Bindings][CUA keybindings]]:

|-----------+--------------------------------------------|
| C-RET     | Start in CUA rectangle mode                |
| C-S-SPC   | Copy text to global mark                   |
| C-1 C-w   | Kill, yank, copy, etc to numbered register |
|-----------+--------------------------------------------|

To view the content of a register, use M-x ~view-register~

#+BEGIN_SRC emacs-lisp
(cua-selection-mode t)
#+END_SRC

*** ido-mode

[[https://www.emacswiki.org/emacs/InteractivelyDoThings][Interactively Do Things]]: typing the first few characters of a buffer to switch
to or a file to open will narrow down successive choices.

#+BEGIN_SRC emacs-lisp
;;(ido-mode t)
#+END_SRC


*** Helm

#+BEGIN_SRC emacs-lisp
(helm-mode 1)
#+END_SRC


** Common packages


*** use-package

[[https://github.com/jwiegley/use-package][use-package]] is a package to tidy up your .emacs configuration. It allows you to
run code before or after a package is loaded, set up key bindings for modes, in
a neat and concise declarative manner.

 #+BEGIN_SRC emacs-lisp
(require 'use-package)
 #+END_SRC

*** yasnippet

[[https://github.com/capitaomorte/yasnippet/blob/master/README.mdown][yasnippet]] is a templating system for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config (yas-global-mode 1))
#+END_SRC

*** undo-tree

Represent successive undos and redos as a tree, which can be navigated with the
up and down arrow keys.

 #+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :init
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))
 #+END_SRC

*** bm (visual bookmarks)

Leave visual bookmarks in your code via [[https://github.com/joodland/bm][bm]]. The keybindings listed here are
those of ... Visual Studio.

#+BEGIN_SRC emacs-lisp
(use-package bm
  :init
  (progn
    (global-set-key (kbd "<C-f2>") 'bm-toggle)
    (global-set-key (kbd "<f2>")   'bm-next)
    (global-set-key (kbd "<S-f2>") 'bm-previous)
    ;; Click on fringe to toggle bookmarks, and use mouse wheel to move between them.
    (global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
    (global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
    (global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
    (setq bm-in-lifo-order t)
    (setq temporary-bookmark-p t)))
#+END_SRC

*** ace-isearch

Refer to windows by number.

| M-o <num>         | Jump to window <num>            |
| C-u M-o <num>     | Switch current window and <num> |
| C-u C-u M-o <num> | Delete window <num>             |

#+BEGIN_SRC emacs-lisp
(use-package ace-isearch
  :init
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
  :bind (("M-o" . ace-window)))
#+END_SRC

*** Hungry delete

Delete all whitespace with one stroke of backspace.

#+BEGIN_SRC emacs-lisp
(use-package hungry-delete)
#+END_SRC

*** deft

    Deft is an Emacs mode for quickly browsing, filtering, and editing
    directories of plain text notes.

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :bind ("<f8>" . deft)
    :commands (deft)
    :config (setq deft-directory "~/src/jvkersch/notes"
                  deft-extensions '("md" "org")))
#+END_SRC

* Color themes

Make code blocks in Org-mode stand out from the rest of the text. I stole this
from [[https://github.com/howardabrams/dot-files/blob/master/emacs-mac.org][Howard Abrams]].

#+BEGIN_SRC emacs-lisp
(defun jvk/org-src-color-blocks-light ()
  "Colors the block headers and footers to make them stand out more for lighter themes"
  (interactive)
  (set-face-attribute 'org-block-begin-line nil
     :underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")
  (set-face-attribute 'org-block nil :background "#FFFFEA")
  (set-face-attribute 'org-block-end-line nil
     :overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")
  (set-face-attribute 'mode-line-buffer-id nil :foreground "#005000" :bold t))

(defun ha/org-src-color-blocks-light ()
  "Colors the block headers and footers to make them stand out more for lighter themes"
  (interactive)
  (custom-set-faces
   '(org-block-begin-line
    ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
   '(org-block-background
     ((t (:background "#FFFFEA"))))
   '(org-block
     ((t (:background "#FFFFEA"))))
   '(org-block-end-line
     ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))

   '(mode-line-buffer-id ((t (:foreground "#005000" :bold t))))
   '(which-func ((t (:foreground "#008000"))))))

(defun ha/org-src-color-blocks-dark ()
  "Colors the block headers and footers to make them stand out more for dark themes"
  (interactive)
  (custom-set-faces
   '(org-block-begin-line
     ((t (:foreground "#008ED1" :background "#002E41"))))
   '(org-block-background
     ((t (:background "#444444"))))
   '(org-block-end-line
     ((t (:foreground "#008ED1" :background "#002E41"))))

   '(mode-line-buffer-id ((t (:foreground "black" :bold t))))
   '(which-func ((t (:foreground "green"))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
(defun jvk/change-theme (theme org-block-style)
  "Change the color scheme"
  (funcall theme)
  (funcall org-block-style))

(defun jvk/dark-color-theme ()
  "Switch to dark color theme"
  (interactive)
  (jvk/change-theme 'color-theme-sanityinc-tomorrow-night
                    'ha/org-src-color-blocks-dark))

(defun jvk/light-color-theme ()
  "Switch to light color theme"
  (interactive)
  (jvk/change-theme 'color-theme-sanityinc-tomorrow-day
                    'jvk/org-src-color-blocks-light))

(jvk/dark-color-theme)
;(jvk/light-color-theme)
#+END_SRC


* Org-mode


** Basic Org customization

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode nil)))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

(setq org-tags-column -90)
(setq org-src-fontify-natively t)
#+END_SRC


** org-todo

#+BEGIN_SRC emacs-lisp
(setq org-log-done t)

; org clock mode.
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "PENDING" "|" "DONE" "CANCELLED")))
(setq org-todo-keyword-faces
          '(("TODO" . (:foreground "red"))
            ("IN-PROGRESS" . (:foreground "orange"))
            ("PENDING" . (:foreground "yellow"))
            ("DONE" . (:foreground "green"))
            ("CANCELLED" . (:foreground "lightblue"))))
#+END_SRC


** org-agenda

Commands adapted from [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][An Agenda for Life With Org Mode]].

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
      '("~/Dropbox/Joris/writing/"
        "~/Dropbox/Joris/writing/projects"
        "~/Dropbox/Joris/writing/personal-projects"
        "~/Dropbox/Joris/writing/areas-of-responsibility"))

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((agenda "")
          (alltodo "")))))
#+END_SRC


** org-babel

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (python . t)
   (R . t)
   (ruby . t)
   (sqlite . t)
   (perl . t)))
#+END_SRC


** org-bullets

Show org-mode bullets as UTF-8 characters. 

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+END_SRC


** org-download

Allows for easy saving of file resources (mostly images) to org
directories. The ~org-download-method~ customization is taken directly from the
[[https://coldnew.github.io/hexo-org-example/2018/05/22/use-org-download-to-drag-image-to-emacs/][coldnew]] blog (I've only changed the name to make it fit my naming scheme
better).

#+BEGIN_SRC emacs-lisp
(defun jvk/org-download-method (link)
  "Provide file location to store resources."
  (let ((filename
         (file-name-nondirectory
          (car (url-path-and-query
                (url-generic-parse-url link)))))
        (dirname (file-name-sans-extension (buffer-name)) ))
    (unless (file-exists-p dirname)
      (make-directory dirname))
    (message "Saving file '%s' to directory '%s'..." filename dirname)
    (expand-file-name filename dirname)))

(use-package org-download
  :init
  (setq org-download-method 'jvk/org-download-method))
#+END_SRC


** org-capture

#+BEGIN_SRC emacs-lisp
(setq org-directory
      (file-name-as-directory
       (expand-file-name "~/Dropbox/Joris/writing")))
(setq jvk/gtd-file (concat org-directory "gtd.org"))
(setq org-default-notes-file (concat org-directory "/inbox.org"))

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
         "** TODO %?")
        ("n" "Note" item (file+headline org-default-notes-file "Notes")
         "%?")
        ("1" "1-on-1" item (file+headline org-default-notes-file "1-on-1 meetings")
         "%?")))
#+END_SRC


** org-roam

#+BEGIN_SRC emacs-lisp
  ;;   (add-to-list 'load-path (expand-file-name "org-roam" "~/src/org"))
  ;; (use-package org-roam
  ;;       :hook
  ;;       (after-init . org-roam-mode)
  ;;       :custom
  ;;       (org-roam-directory (expand-file-name "notes" "~/src/jvkersch/"))
  ;;       :bind (:map org-roam-mode-map
  ;;               (("C-c n l" . org-roam)
  ;;                ("C-c n f" . org-roam-find-file)
  ;;                ("C-c n j" . org-roam-jump-to-index)
  ;;                ("C-c n b" . org-roam-switch-to-buffer)
  ;;                ("C-c n g" . org-roam-graph))
  ;;               :map org-mode-map
  ;;               (("C-c n i" . org-roam-insert))))
#+END_SRC

** Miscellaneous customizations for org-mode

#+BEGIN_SRC emacs-lisp
(defun gtd ()
  "Open GTD buffer"
  (interactive)
  (find-file jvk/gtd-file))
#+END_SRC


** Structured notetaking with org-mode (in progress)

#+BEGIN_SRC emacs-lisp
(defvar jvk/zettel-base-directory
  (expand-file-name "~/src/jvkersch/notes"))

;; Adapted from org-roam (https://github.com/jethrokuan/org-roam)
(defun org-roam--extract-global-props (props)
  "Extract PROPS from the current org buffer.
The search terminates when the first property is encountered."
  (let ((buf (org-element-parse-buffer))
        res)
    (dolist (prop props)
      (let ((p (org-element-map buf 'keyword
                 (lambda (kw)
                   (when (string= (org-element-property :key kw) prop)
                     (org-element-property :value kw)))
                 :first-match t)))
        (push (cons prop p) res)))
    res))

(defun jvk/extract-title ()
  (interactive)
  "Extract the TITLE property from the current org buffer."
    (let ((props (org-roam--extract-global-props '("TITLE"))))
      (cdr (assoc "TITLE" props))))

(defun jvk/extract-title-from-org-file (org-fname)
  (interactive)
  "Extract the TITLE property from a given org buffer."
  (with-temp-buffer
    (insert-file-contents org-fname)
    (jvk/extract-title)))

(defun jvk/capture-org-title ()
  (interactive)
  "Copy the TITLE of the current org buffer to the kill ring."
  (let ((title (jvk/extract-title)))
    (if title
        (kill-new title)
      (error "No TITLE property found in current buffer."))))

(defun isodate ()
  (interactive)
  (format-time-string "%Y-%m-%d"))

(defun jvk/create-new-zettel ()
  (interactive)
  (let* ((zettel-base-name
          (read-string "Enter zettel name: " (format "%s-" (isodate))))
         (zettel-path
          (concat (file-name-as-directory jvk/zettel-base-directory)
                  zettel-base-name)))
    (find-file zettel-path)))
#+END_SRC


* Coding modes


** Terraform scripts

Open Terraform scripts (.tf) in HCL mode

#+BEGIN_SRC emacs-lisp
(use-package hcl-mode
  :mode (("\\.tf" . hcl-mode)))
#+END_SRC


** C/C++ mode

#+BEGIN_SRC emacs-lisp
(defun c-hook ()
  "Styling for C and C++ modes."
  (c-toggle-auto-hungry-state t)
  (c-set-style "stroustrup")
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'inline-open 0))

(add-hook 'c-mode-hook   'c-hook)
(add-hook 'c++-mode-hook 'c-hook)

(c-set-offset 'innamespace 0)
#+END_SRC

Display .mod files (ngspice circuit files) in C mode.

#+BEGIN_SRC emacs-lisp
(add-to-list
  'auto-mode-alist
  '("\\.mod$" . c-mode))
#+END_SRC


** Shell scripts

Needs shellcheck to be installed.

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook 'flycheck-mode)
#+END_SRC


** Magit

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-g M-s") 'magit-status)
(global-set-key (kbd "M-g M-c") 'magit-checkout)
#+END_SRC

Show commit SHA in blame mode.

#+BEGIN_SRC emacs-lisp
(setq magit-blame-heading-format "%-20a %C %s %H")
#+END_SRC


** Cython mode

Open Sage Cython files (.spyx) as well as regular Cython/Pyrex files (.pyx) in
cython mode.

#+BEGIN_SRC emacs-lisp
(use-package cython-mode
  :mode (("\\.spyx" . cython-mode)
         ("\\.pyx" . cython-mode)))
#+END_SRC


** Octave mode

Associate the .m extension with Matlab instead of Objective C.

#+BEGIN_SRC emacs-lisp
(use-package octave-mode
  :mode (("\\.m$" . octave-mode)))
#+END_SRC


** Unix files

Not coding per se, but use [[https://wiki.archlinux.org/index.php/emacs#Syntax_Highlighting_for_Systemd_Files][syntax highlighting for Unix system files]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
#+END_SRC


** Python

#+BEGIN_SRC emacs-lisp
;;; Python-specific customizations.
(add-hook 'python-mode-hook     'flycheck-mode)
(add-hook 'python-mode-hook     'python-docstring-mode)


(use-package elpy
  :ensure t
  :init
  (elpy-enable))


; Added #: to the fill regexp to reflow Python comments that have #: as the
; comment marker (e.g. traits docstrings)
(defun adjust-adaptive-fill-regexp ()
  (interactive)
  (setq adaptive-fill-regexp
        (purecopy "[ \t]*\\([-–!|#%;>*·•‣⁃◦]+:?[ \t]*\\)*")))
(add-hook 'python-mode-hook 'adjust-adaptive-fill-regexp)

(defun add-good-python-path ()
  "Add the path to a decent Python installation."
  (setq edm-path (expand-file-name "~/.edm/envs/edm/bin"))
  (add-to-list 'python-shell-exec-path edm-path)
  (add-to-list 'exec-path edm-path))

(add-hook 'python-mode-hook 'add-good-python-path)
#+END_SRC

Taken from [[[https://bitbucket.org/durin42/nosemacs]]].

#+BEGIN_SRC emacs-lisp
;; (require 'nose)
(add-hook 'python-mode-hook
          (lambda ()
            (local-set-key "\C-ca" 'nosetests-all)
            (local-set-key "\C-cm" 'nosetests-module)
            (local-set-key "\C-co" 'nosetests-one)
            (local-set-key "\C-cpa" 'nosetests-pdb-all)
            (local-set-key "\C-cpm" 'nosetests-pdb-module)
            (local-set-key "\C-cpo" 'nosetests-pdb-one)))
#+END_SRC


** Haskell

#+BEGIN_SRC emacs-lisp
;; Haskell mode
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
#+END_SRC


** Golang

#+BEGIN_SRC emacs-lisp
;; Golang
(require 'go-mode)
(add-hook 'go-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'gofmt-before-save)
            (setq tab-width 4)
            (setq indent-tabs-mode 1)))
#+END_SRC


* Useful elisp snippets.

Rename buffer and the file that it's visiting.

#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file name new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+END_SRC

