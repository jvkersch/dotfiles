#+BEGIN_SRC emacs-lisp
(defun conda-env-binpath (&optional envname)
  (interactive "P")
  (expand-file-name
   (if (not (eq envname nil))
       (file-name-concat "~/miniconda3/envs" envname "bin")
     "~/miniconda3/bin")))

(when (memq window-system '(mac ns x))
   (exec-path-from-shell-initialize))

(setq exec-path
   (append exec-path (list (conda-env-binpath))))
      ;; (setq exec-path
          ;;       (append exec-path
          ;;               '("/opt/homebrew/bin/")
          ;;               '((expand-file-name "~/.cargo/bin"))))

          ;; (setenv "PATH" (concat (getenv "PATH") ":/opt/homebrew/bin:~/.cargo/bin"))




#+END_SRC


Open ~.emacs.d~ directory.


#+BEGIN_SRC emacs-lisp
  (defun emacs-home-directory ()
    (interactive)
    (find-file (expand-file-name "~/.emacs.d")))
#+END_SRC


*** Special fonts

    Use something other than the (ugly) default for Korean

#+BEGIN_SRC emacs-lisp
(set-fontset-font "fontset-default" 'hangul "Noto Sans CJK KR Regular")
#+END_SRC


    Use a more visually pleasing default font (needs to be installed externally)

#+BEGIN_SRC emacs-lisp
  ;; (set-face-attribute 'default nil :font "cousine")
  ;; (set-frame-font "cousine" nil t)
  ;; (set-face-attribute 'default nil :height 140)
#+END_SRC


*** Visual mode

Visual line mode turns on line wrapping and causes simple editing commands
to act on visual lines, rather than logical lines.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

*** Line numbers

Show line numbers in the status line, show column numbers as well, and set the
fill column (the column beyond which line wrapping should happen) to
something sensible for coding.

#+BEGIN_SRC emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
(setq-default fill-column 79)
#+END_SRC

Automatically add a newline on the last line when there is none.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

*** CUA mode

Enable [[https://www.emacswiki.org/emacs/CuaMode][CUA mode]] (Common User Access), allows for more flexible selections,
rectangle selection using C-RET, easy access to registers, and more. It comes
bundled with Emacs.

Some useful [[http://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html#CUA-Bindings][CUA keybindings]]:

|-----------+--------------------------------------------|
| C-RET     | Start in CUA rectangle mode                |
| C-S-SPC   | Copy text to global mark                   |
| C-1 C-w   | Kill, yank, copy, etc to numbered register |
|-----------+--------------------------------------------|

To view the content of a register, use M-x ~view-register~

#+BEGIN_SRC emacs-lisp
(cua-selection-mode t)
#+END_SRC

*** ido-mode

[[https://www.emacswiki.org/emacs/InteractivelyDoThings][Interactively Do Things]]: typing the first few characters of a buffer to switch
to or a file to open will narrow down successive choices.

#+BEGIN_SRC emacs-lisp
;;(ido-mode t)
#+END_SRC

*** Ivy-mode

    From the manual:

    "Ivy is for quick and easy selection from a list. When Emacs prompts for a
    string from a list of several possible choices, Ivy springs into action to
    assist in narrowing and picking the right string from a vast number of
    choices."

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode t))    
#+END_SRC

*** Access to shared files

    Set the base path for my pCloud drive, regardless of the platform we're on.

#+BEGIN_SRC emacs-lisp
  (setq PCLOUD
      (file-name-as-directory
       (cond
        ((eq system-type 'windows-nt) "P:/Shared")
        ((eq system-type 'darwin) "~/pCloud Drive")
        (t "~/pCloudDrive"))))
#+END_SRC

** Common packages

*** yasnippet

[[https://github.com/capitaomorte/yasnippet/blob/master/README.mdown][yasnippet]] is a templating system for Emacs.


*** bm (visual bookmarks)

Leave visual bookmarks in your code via [[https://github.com/joodland/bm][bm]]. The keybindings listed here are
those of ... Visual Studio.

#+BEGIN_SRC emacs-lisp
  (use-package bm
    :ensure t
    :init
    (progn
      (global-set-key (kbd "<C-f2>") 'bm-toggle)
      (global-set-key (kbd "<f2>")   'bm-next)
      (global-set-key (kbd "<S-f2>") 'bm-previous)
      ;; Click on fringe to toggle bookmarks, and use mouse wheel to move between them.
      (global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
      (global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
      (global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
      (setq bm-in-lifo-order t)
      (setq temporary-bookmark-p t)))
#+END_SRC


*** Hungry delete

Delete all whitespace with one stroke of backspace.

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t)
#+END_SRC

*** deft

    Deft is an Emacs mode for quickly browsing, filtering, and editing
    directories of plain text notes.

#+BEGIN_SRC emacs-lisp :results silent
  ;; (use-package deft
  ;;   :ensure t
  ;;   :bind ("<f8>" . deft)
  ;;   :init (setq deft-directory "~/src/jvkersch/notes"
  ;; 	      deft-extensions '("org" "md")
  ;; 	      deft-use-filename-as-title t))

  ;; (use-package zetteldeft
  ;;   :after deft
  ;;   :config
  ;;     (zetteldeft-set-classic-keybindings))
#+END_SRC


*** nov.el
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+END_SRC

*** BookMark+

    [[https://www.emacswiki.org/emacs/BookmarkPlus][BookMark+]] has to be downloaded manually from the Emacs wiki.

#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "~/.emacs.d/bookmark+")
  ;; (require 'bookmark+)
#+END_SRC


*** auto-revert-mode

    Check every second (rather than every 5 seconds, the default) whether PDF
    has changed. Useful when displaying the output from a LaTeX document in a
    buffer.

    #+BEGIN_SRC emacs-lisp
      (setq auto-revert-interval 1)    
    #+END_SRC




* Coding modes

** Projectile

#+BEGIN_SRC emacs-lisp   
(use-package projectile
  :ensure t
  :pin melpa-stable
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+END_SRC

** XYZ

#+BEGIN_SRC emacs-lisp   
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           (julia-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)

  ;; (use-package lsp-julia
  ;;   :config
  ;;   (setq lsp-julia-default-environment "~/.julia/environments/v1.8"))
#+END_SRC




** Terraform scripts

Open Terraform scripts (.tf) in HCL mode

#+BEGIN_SRC emacs-lisp
  (use-package hcl-mode
    :ensure t
    :mode (("\\.tf" . hcl-mode)))
#+END_SRC


** C/C++ mode

#+BEGIN_SRC emacs-lisp
(defun c-hook ()
  "Styling for C and C++ modes."
  (c-toggle-auto-hungry-state t)
  (c-set-style "stroustrup")
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'inline-open 0))

(add-hook 'c-mode-hook   'c-hook)
(add-hook 'c++-mode-hook 'c-hook)

(c-set-offset 'innamespace 0)
#+END_SRC

Display .mod files (ngspice circuit files) in C mode.

#+BEGIN_SRC emacs-lisp
(add-to-list
  'auto-mode-alist
  '("\\.mod$" . c-mode))
#+END_SRC


** Shell scripts

Needs shellcheck to be installed.

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook 'flycheck-mode)
#+END_SRC


** Magit

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-g M-s") 'magit-status)
(global-set-key (kbd "M-g M-c") 'magit-checkout)
#+END_SRC

Show commit SHA in blame mode.

#+BEGIN_SRC emacs-lisp
(setq magit-blame-heading-format "%-20a %C %s %H")
#+END_SRC


** Cython mode

Open Sage Cython files (.spyx) as well as regular Cython/Pyrex files (.pyx) in
cython mode.

#+BEGIN_SRC emacs-lisp
  (use-package cython-mode
    :ensure t
    :mode (("\\.spyx" . cython-mode)
	   ("\\.pyx" . cython-mode)))
#+END_SRC


** Unix files

Not coding per se, but use [[https://wiki.archlinux.org/index.php/emacs#Syntax_Highlighting_for_Systemd_Files][syntax highlighting for Unix system files]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
#+END_SRC


** Python

   C-c C-c: send file to interpreter
   
#+BEGIN_SRC emacs-lisp
  ;; Python-specific customizations.
  (add-hook 'python-mode-hook     'flycheck-mode)
  (add-hook 'python-mode-hook     'python-docstring-mode)

  ;; Use Conda environments
  (setenv "WORKON_HOME" "~/miniconda3/envs/")

  ;; Use IPython if available
  (defun jvk/find-ipython ()
    (interactive)
    (when (executable-find "ipython")
      (setq python-shell-interpreter "ipython")
      (setq python-shell-interpreter-args "--simple-prompt")))
  (add-hook 'pyvenv-post-activate-hooks 'jvk/find-ipython)

  (use-package elpy
    :ensure t
    :init
    (elpy-enable))

  (use-package python-black
    :ensure t
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim))

  ;; Added #: to the fill regexp to reflow Python comments that have #: as the
  ;; comment marker (e.g. traits docstrings)
  (defun adjust-adaptive-fill-regexp ()
    (interactive)
    (setq adaptive-fill-regexp
          (purecopy "[ \t]*\\([-–!|#%;>*·•‣⁃◦]+:?[ \t]*\\)*")))
  (add-hook 'python-mode-hook 'adjust-adaptive-fill-regexp)

  ;; Python-pytest doesn't install on melpa because of a dependency on an outdated
  ;; version of transient.
  (add-to-list 'load-path "~/.emacs.d/emacs-python-pytest/")
  (use-package python-pytest
    :bind (("M-g t" . python-pytest-dispatch)))

#+END_SRC

Taken from [[[https://bitbucket.org/durin42/nosemacs]]].

#+BEGIN_SRC emacs-lisp
  ;; (require 'nose)
  ;; (add-hook 'python-mode-hook
  ;;           (lambda ()
  ;;             (local-set-key "\C-ca" 'nosetests-all)
  ;;             (local-set-key "\C-cm" 'nosetests-module)
  ;;             (local-set-key "\C-co" 'nosetests-one)
  ;;             (local-set-key "\C-cpa" 'nosetests-pdb-all)
  ;;             (local-set-key "\C-cpm" 'nosetests-pdb-module)
  ;;             (local-set-key "\C-cpo" 'nosetests-pdb-one)))
#+END_SRC


** Haskell

#+BEGIN_SRC emacs-lisp
;; Haskell mode
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
#+END_SRC


** Golang

#+BEGIN_SRC emacs-lisp
;; Golang
;;(require 'go-mode)
(add-hook 'go-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'gofmt-before-save)
            (setq tab-width 4)
            (setq indent-tabs-mode 1)))
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
(use-package rustic
  :ensure
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t)))
#+END_SRC

** Emacs speaks statistics

   #+BEGIN_SRC emacs-lisp
     (use-package ess
      :ensure t
      :init (require 'ess-site))
   #+END_SRC

** Nextflow

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.nf\\'" . load-nextflow-mode))
     (defun load-nextflow-mode ()
       (let ((nextflow-file (expand-file-name "nextflow-mode.el" user-emacs-directory)))
         (when (file-exists-p nextflow-file)
           (load nextflow-file))))

     (add-hook 'after-init-hook 'load-nextflow-mode)

   #+END_SRC
   

* Useful elisp snippets.

Rename buffer and the file that it's visiting.

#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file name new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+END_SRC
