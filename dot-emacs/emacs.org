#+TITLE: My Emacs configuration file
#+AUTHOR: Joris Vankerschaver
#+EMAIL: joris.vankerschaver@gmail.com
#+STARTUP: showall

* TODO Do BEGIN/END_SRC blocks have to be left-justified?

* Installation instructions
** Make sure cask.el path refers to existing file
   (TODO: Make this platform independent)
** Run `cask install` from within .emacs.d folder.
** From within Emacs, run "M-x jedi:install-server"
   (uses system Python by default; needs virtualenv)

* Package management.
#+BEGIN_SRC emacs-lisp
(require 'cask "/usr/local/share/emacs/site-lisp/cask.el")  ; Homebrew
(cask-initialize)
(require 'pallet)
(pallet-mode t)

(server-start)
#+END_SRC

* Setting up Emacs core

  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Joris Vankerschaver"
        user-email-address "Joris.Vankerschaver@gmail.com")
  #+END_SRC

  Basically, turn off all the fluff: no splash screen, short y/n answer format
  instead of the default yes/no, no tool bar, etc.

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "Emacs: %f")
  (tool-bar-mode -1)  ; I never use it anyway
  (setq inhibit-splash-screen t)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

  Show Emacs with a slightly larger screen. I should probably retire this and
  have the window manager take care of this instead.

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (if (> (x-display-pixel-width) 1280)
        (add-to-list 'default-frame-alist (cons 'width 100))
      (add-to-list 'default-frame-alist (cons 'width 80))))
#+END_SRC

  By default Emacs creates backups in the current directory. Create them in a
  hidden directory instead, so they're out of the way.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

  Everything that Homebrew installs, most notably different Python
  installations, ends up in /usr/local/bin. Add that.

#+BEGIN_SRC emacs-lisp
  (setq exec-path
        (append exec-path '("/usr/local/bin/")))
#+END_SRC

* Fonts

  #+BEGIN_SRC sh :tangle no
    # Install Hasklig
    curl -OL https://github.com/i-tu/Hasklig/releases/download/0.9/Hasklig-0.9.tar.gz
    tar xzvf Hasklig-0.9.tar.gz && cp Hasklig-0.9/*.otf ~/Library/Fonts/

    # Install Source Code Pro
    curl -OL https://github.com/adobe-fonts/source-code-pro/archive/2.010R-ro/1.030R-it.tar.gz
    tar xzvf 1.030R-it.tar.gz && \
      cp source-code-pro-2.010R-ro-1.030R-it/OTF/*.otf ~/Library/Fonts
   #+END_SRC

  The font configuration below is copied from [[https://github.com/howardabrams/dot-files/blob/master/emacs-client.org][Howard Abram's emacs configuration]]:

  #+BEGIN_SRC emacs-lisp
    (defvar ha/fixed-font-family
      (cond ((x-list-fonts "Hasklig")         "Hasklig")
            ((x-list-fonts "Source Code Pro") "Source Code Pro")
            ((x-list-fonts "Anonymous Pro")   "Anonymous Pro")
            ((x-list-fonts "M+ 1mn")          "M+ 1mn"))
      "My fixed width font based on what is installed, `nil' if not defined.")

    (when ha/fixed-font-family
      (set-frame-font ha/fixed-font-family)
      (set-face-attribute 'default nil :font ha/fixed-font-family :height 160)
      (set-face-font 'default ha/fixed-font-family))
  #+END_SRC


* Tweaks for editing in Emacs

** Standard stuff

   Visual line mode turns on line wrapping and causes simple editing commands
   to act on visual lines, rather than logical lines. It's pretty much a
   given...

#+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
     (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

   More uncontroversial stuff: show line numbers in the status line, show
   column numbers as well, and set the fill column (the column beyond which
   line wrapping should happen) to something sensible for coding.

#+BEGIN_SRC emacs-lisp
     (setq line-number-mode t)
     (setq column-number-mode t)
     (setq-default fill-column 79)
#+END_SRC

   Add a newline on the last line when there is none. This is visually
   pleasing, and tools like pycodestyle for Python complain about this.

#+BEGIN_SRC emacs-lisp
     (setq require-final-newline t)
#+END_SRC

** CUA mode

   [[https://www.emacswiki.org/emacs/CuaMode][CUA mode]] (Common User Access)
   allows for more flexible selections, rectangle selection using C-RET, easy
   access to registers, and more. It comes bundled with Emacs.

   I like having it around, but I don't want it to override the standard Emacs
   keybindings.

#+BEGIN_SRC emacs-lisp
     (cua-selection-mode t)
#+END_SRC

   Some useful [[http://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html#CUA-Bindings][CUA keybindings]]:

   |-----------+--------------------------------------------|
   | C-RET     | Start in CUA rectangle mode                |
   | C-S-SPC   | Copy text to global mark                   |
   | +C-1 C-w+ | Kill, yank, copy, etc to numbered register |
   |-----------+--------------------------------------------|

   (The numbered prefix keys interfere with Amethyst)

* Useful packages for all modes

** use-package

   [[https://github.com/jwiegley/use-package][use-package]] is, in its own words, a package to tidy up your .emacs
   configuration. It allows you to run code before or after a package is loaded,
   set up key bindings for modes, in a neat and concise declarative manner.

#+BEGIN_SRC emacs-lisp
     (require 'use-package)
#+END_SRC

** yasnippet

   [[https://github.com/capitaomorte/yasnippet/blob/master/README.mdown][yasnippet]] is a templating system for Emacs. 

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))

#+END_SRC

** undo-tree

   Represent successive undos and redos as a tree, which can be navigated with
   the up and down arrow keys.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :init
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))

#+END_SRC

** visual bookmarks

   Leave visual bookmarks in your code via [[https://github.com/joodland/bm][bm]]. The keybindings listed here are
   those of ... Visual Studio.

#+BEGIN_SRC emacs-lisp
(use-package bm
  :init
  (progn
    (global-set-key (kbd "<C-f2>") 'bm-toggle)
    (global-set-key (kbd "<f2>")   'bm-next)
    (global-set-key (kbd "<S-f2>") 'bm-previous)
    ;; Click on fringe to toggle bookmarks, and use mouse wheel to move between them.
    (global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
    (global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
    (global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
    (setq bm-in-lifo-order t)
    (setq temporary-bookmark-p t)))

#+END_SRC

** ace-isearch mode

#+BEGIN_SRC emacs-lisp
(global-ace-isearch-mode t)
(global-set-key (kbd "M-p") 'ace-window)

(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode 1)
#+END_SRC

** Hungry delete

   Does what it says -- delete *all* whitespace with one stroke of backspace.

#+BEGIN_SRC emacs-lisp
(require 'hungry-delete)
#+END_SRC

** ido-mode

   [[https://www.emacswiki.org/emacs/InteractivelyDoThings][Interactively Do Things]]: typing the first few characters of a buffer to
   switch to or a file to open will narrow down successive choices.

#+BEGIN_SRC emacs-lisp
(ido-mode t)
#+END_SRC

* Color themes

  Make code blocks in Org-mode stand out from the rest of the text. I stole
  this from [[https://github.com/howardabrams/dot-files/blob/master/emacs-mac.org][Howard Abrams]].

#+BEGIN_SRC emacs-lisp
(defun ha/org-src-color-blocks-light ()
  "Colors the block headers and footers to make them stand out more for lighter themes"
  (interactive)
  (custom-set-faces
   '(org-block-begin-line
    ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
   '(org-block-background
     ((t (:background "#FFFFEA"))))
   '(org-block
     ((t (:background "#FFFFEA"))))
   '(org-block-end-line
     ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))

   '(mode-line-buffer-id ((t (:foreground "#005000" :bold t))))
   '(which-func ((t (:foreground "#008000"))))))

(defun ha/org-src-color-blocks-dark ()
  "Colors the block headers and footers to make them stand out more for dark themes"
  (interactive)
  (custom-set-faces
   '(org-block-begin-line
     ((t (:foreground "#008ED1" :background "#002E41"))))
   '(org-block-background
     ((t (:background "#444444"))))
   '(org-block-end-line
     ((t (:foreground "#008ED1" :background "#002E41"))))

   '(mode-line-buffer-id ((t (:foreground "black" :bold t))))
   '(which-func ((t (:foreground "green")))))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jvk/change-theme (theme org-block-style)
  "Change the color scheme"
  (funcall theme)
  (funcall org-block-style))

(defun jvk/dark-color-theme ()
  "Switch to dark color theme"
  (jvk/change-theme 'color-theme-sanityinc-tomorrow-night
                    'ha/org-src-color-blocks-dark))

(defun jvk/light-color-theme ()
  "Switch to light color theme"
  (jvk/change-theme 'color-theme-sanityinc-tomorrow-day
                    'ha/org-src-color-blocks-light))

(jvk/dark-color-theme)
;(jvk/light-color-theme)
#+END_SRC


* Coding modes

#+BEGIN_SRC emacs-lisp
(setq tags-table-list '("~/.etags"))
#+END_SRC

** Magit
   
   Show commit SHA in blame mode.

#+BEGIN_SRC emacs-lisp
(setq magit-blame-heading-format "%-20a %C %s %H")
#+END_SRC

** Cython mode

   Open Sage Cython files (.spyx) as well as regular Cython/Pyrex files (.pyx)
   in cython mode.

#+BEGIN_SRC emacs-lisp
(use-package cython-mode
  :mode (("\\.spyx" . cython-mode)
         ("\\.pyx" . cython-mode)))
#+END_SRC

** Octave mode

   Associate the .m extension with Matlab instead of Objective C.

#+BEGIN_SRC emacs-lisp
(add-to-list
  'auto-mode-alist
  '("\\.m$" . octave-mode))
#+END_SRC

** Unix files

   Not coding per se, but use [[https://wiki.archlinux.org/index.php/emacs#Syntax_Highlighting_for_Systemd_Files][syntax highlighting for Unix system files]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
#+END_SRC

** Coding hook

   Adapted from Jaap Eldering. Things that are convenient across all coding
   buffers.

#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face empty tabs tab-mark lines-tail))
(defun coding-hook ()
  "Enable things that are convenient across all coding buffers."
  (column-number-mode t)
  (setq indent-tabs-mode nil)
  ;; (auto-fill-mode)
  (whitespace-mode)
  (hungry-delete-mode)
  ;; (flycheck-mode)
  ;; (fci-mode)
  )

(add-hook 'c-mode-common-hook   'coding-hook)
(add-hook 'sh-mode-hook         'coding-hook)
(add-hook 'js-mode-hook         'coding-hook)
(add-hook 'java-mode-hook       'coding-hook)
(add-hook 'lisp-mode-hook       'coding-hook)
(add-hook 'emacs-lisp-mode-hook 'coding-hook)
(add-hook 'makefile-mode-hook   'coding-hook)
(add-hook 'latex-mode-hook      'coding-hook)
(add-hook 'python-mode-hook     'coding-hook)

(add-hook 'haskell-mode-hook 'haskell-indentation-mode)

#+END_SRC

** Python

   Despite/because of Python being my language of choice, my Python
   configuration is a huge jumble of things I copied from Stackoverflow, things
   that I needed on the fly, and various other hacks (sometimes antiquated).

#+BEGIN_SRC emacs-lisp
;;; Python-specific customizations.
(add-hook 'python-mode-hook     'flycheck-mode)

(defun add-good-python-path ()
  "Add the path to a decent Python installation."
  (setq jaguar-path "~/.jaguar/envs/jaguar/bin")
  (setq python-shell-exec-path
    (cons jaguar-path python-shell-exec-path))
  (setq python-check-command
    (concat (file-name-as-directory jaguar-path) "pyflakes")))

(add-hook 'python-mode-hook 'add-good-python-path)

; Use R's keybindings to send Python code to the interpreter
; http://stackoverflow.com/questions/27777133
(eval-after-load "python"
  '(progn
     (define-key python-mode-map (kbd "C-c C-r") 'python-shell-send-region)))

; Set up a register with typical Python preamble
; TODO Add this to the python-mode hook
(set-register ?p '(
    "# -*- coding: utf-8 -*-\n"
    "from __future__ import division, print_function"))
#+END_SRC

*** Insert ipdb snippet at the prompt.

    TODO This can probably be done much more efficiently with yasnippet.

#+BEGIN_SRC emacs-lisp
(defun insert-ipdb-statement ()
  (interactive)
  (insert "import ipdb; ipdb.set_trace()"))

(defun my-python-stuff ()
  "My customizations for Python mode"
  (interactive)
  (local-set-key (kbd "C-c i") 'insert-ipdb-statement))

(add-hook 'python-mode-hook 'my-python-stuff)
#+END_SRC

*** Manage virtual environments from within Emacs

#+BEGIN_SRC emacs-lisp
(require 'virtualenvwrapper)
(venv-initialize-interactive-shells)
(venv-initialize-eshell)
(setq venv-location (expand-file-name "~/.environments"))
#+END_SRC

*** Run nosetests from within Emacs 

    Taken from [[[https://bitbucket.org/durin42/nosemacs]]].

#+BEGIN_SRC emacs-lisp
(require 'nose)
(add-hook 'python-mode-hook
          (lambda ()
            (local-set-key "\C-ca" 'nosetests-all)
            (local-set-key "\C-cm" 'nosetests-module)
            (local-set-key "\C-co" 'nosetests-one)
            (local-set-key "\C-cpa" 'nosetests-pdb-all)
            (local-set-key "\C-cpm" 'nosetests-pdb-module)
            (local-set-key "\C-cpo" 'nosetests-pdb-one)))
#+END_SRC

*** Autocomplete for Python via Emacs Jedi

    Useful default keybindings: C-tab for autocomplete at the point, M-n/M-p to
    scroll through the autocomplete menu.
    
    Setting up Jedi requires a bit of installation, see the top of this file.

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)                 ; optional

; jedi:after-change-handler seems to cause buffer corruption, disable it.
; See https://github.com/tkf/emacs-jedi/issues/234
;     https://debbugs.gnu.org/cgi/bugreport.cgi?bug=20440
(add-hook 'jedi-mode-hook
          (lambda () (remove-hook 'after-change-functions
                                  'jedi:after-change-handler t)))

#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
;; Haskell mode
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
#+END_SRC

** Golang

#+BEGIN_SRC emacs-lisp
;; Golang
(require 'go-mode)
(add-hook 'go-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'gofmt-before-save)
            (setq tab-width 4)
            (setq indent-tabs-mode 1)))
#+END_SRC

** C and C++

#+BEGIN_SRC emacs-lisp
;; C/C++ customizations.
(defun c-hook ()
  "Styling for C and C++ modes."
  (c-toggle-auto-hungry-state t)
  (c-set-style "stroustrup")
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'inline-open 0))

(add-hook 'c-mode-hook   'c-hook)
(add-hook 'c++-mode-hook 'c-hook)

#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp

;; Use the version of Tuareg installed through opam
(add-to-list 'load-path "/Users/jvkersch/.opam/4.02.3/share/emacs/site-lisp/")
(load "/Users/jvkersch/.opam/4.02.3/share/emacs/site-lisp/tuareg-site-file")

#+END_SRC


** Latex

Aangepast van [[http://www.jesshamrick.com/2013/03/31/macs-and-emacs/]]. Forward
search from PDF to LaTeX document is gebaseerd op
[[http://www.cs.berkeley.edu/~prmohan/emacs/latex.html]]. Voor backward search
gebruik ik Skim, en stel ik de editor in de preferences in als
'/usr/local/bin/emacsclient' met als opties '--no-wait +%line "%file"'

#+BEGIN_SRC emacs-lisp
(require 'tex-site)
(use-package tex-site
  :init
  (progn
    (setq LaTeX-command "latex -synctex=1")
    (setq TeX-PDF-mode t)
    (setq TeX-view-program-list
          (quote
           (("Skim"
             (concat "/Applications/Skim.app/"
                     "Contents/SharedSupport/displayline"
                     " %n %o %b")))))
    (setq TeX-view-program-selection
          (quote (
                  (output-pdf "Skim")
                  )))
    (setq TeX-source-correlate-method 'synctex)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)))
#+END_SRC

* Org-mode

This is a hodge-podge of options that I mostly copy-pasted from elsewehere.

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode nil)))

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "PENDING" "|" "DONE" "CANCELLED")))
(setq org-todo-keyword-faces
          '(("TODO" . (:foreground "red"))
            ("IN-PROGRESS" . (:foreground "orange"))
            ("PENDING" . (:foreground "yellow"))
            ("DONE" . (:foreground "green"))
            ("CANCELLED" . (:foreground "lightblue"))))

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
   (python . t)
   (R . t)
   (ruby . t)
   (sqlite . t)
   (perl . t)
   ))

(setq org-src-fontify-natively t)

(require 'org-install)  ;; What does this do again?
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(setq org-log-done t)

(setq org-base-folder (expand-file-name "~/src/personal-stuff/org-documents/"))
(setq org-default-notes-file (concat org-base-folder "notes.org"))

; (setq my-tasks-file
;       (concat (file-name-as-directory org-base-folder) "tasks-2015.org"))
(setq my-unsorted-tasks-file
      (concat (file-name-as-directory org-base-folder) "unsorted-tasks.org"))
(setq my-journal-file
      (concat (file-name-as-directory org-base-folder) "journal.org"))

(define-key global-map "\C-cc" 'org-capture)

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline my-unsorted-tasks-file "Tasks")
             "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree my-journal-file)
             "* %?\nEntered on %U\n  %i\n  %a")))

; Visit org files that I use a lot.
(global-set-key [f3]
                (lambda () (interactive)
                  (find-file my-tasks-file)))
(global-set-key [f4]
                (lambda () (interactive)
                  (find-file my-unsorted-tasks-file)))

; org clock mode.
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

#+END_SRC

* Miscellaneous elisp snippets.

Rename buffer and file it's visiting; taken from [[ http://steve.yegge.googlepages.com/my-dot-emacs-file]]

#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file name new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+END_SRC
