#+TITLE: My Emacs configuration file
#+STARTUP: showall

* Installation instructions
** Make sure cask.el path refers to existing file
   (TODO: Make this platform independent)
** Run `cask install` from within .emacs.d folder.
** From within Emacs, run "M-x jedi:install-server"
   (uses system Python by default; needs virtualenv)

* Package management.
#+BEGIN_SRC emacs-lisp
(require 'cask "/usr/local/share/emacs/site-lisp/cask.el")  ; Homebrew
(cask-initialize)
(require 'pallet)
(pallet-mode t)

(server-start)
#+END_SRC

* Global setup (display and convenience functions).
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Joris Vankerschaver"
      user-email-address "Joris.Vankerschaver@gmail.com")

(require 'use-package)
(require 'hungry-delete)

(setq frame-title-format "Emacs: %f")
(setq inhibit-splash-screen t)
(fset 'yes-or-no-p 'y-or-n-p)
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

(set-face-attribute 'default nil :height 160)

(when (display-graphic-p)
  (if (> (x-display-pixel-width) 1280)
      (add-to-list 'default-frame-alist (cons 'width 100))
    (add-to-list 'default-frame-alist (cons 'width 80))))

(setq exec-path
      (append exec-path '("/usr/local/bin/")))

; Enable CUA mode.
(cua-selection-mode t)

; Visual mode for text files
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))

(setq line-number-mode t)
(setq column-number-mode t)
(setq-default fill-column 79)

; Split window horizontally (left/right) by default.
; http://stackoverflow.com/questions/2081577/setting-emacs-split-to-horizontal
(setq split-height-threshold nil)
(setq split-width-threshold 0)

; \n toevoegen wanneer er geen te vinden is op de laatste regel
(setq require-final-newline t)

(require 'yasnippet)
(yas-global-mode 1)

; Use ace-isearch mode and drop into ace-jump mode right away.
(global-ace-isearch-mode t)
;(setq ace-isearch-input-idle-delay 0.0)

; ace-window mode, with the default keymap.
; Keybindings:
;   M-p <num>            Jump to window <num>
;   C-u M-p <num>        Switch current window and <num>
;   C-u C-u M-p <num>    Delete window <num>
(global-set-key (kbd "M-p") 'ace-window)

(use-package undo-tree
  :init
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))

#+END_SRC

* Color themes

#+BEGIN_SRC emacs-lisp
;(load-theme 'solarized-dark t)
(load-theme 'sanityinc-tomorrow-eighties t)
#+END_SRC

I found these convenient customizations for org-mode at [[https://github.com/howardabrams/dot-files/blob/master/emacs-mac.org]]

#+BEGIN_SRC emacs-lisp
(defun org-src-color-blocks-dark ()
  "Colors the block headers and footers to make them stand out more for dark themes"
  (interactive)
  (custom-set-faces
   '(org-block-begin-line
     ((t (:foreground "#008ED1" :background "#002E41"))))
   '(org-block-background
     ((t (:background "#111111"))))
   '(org-block-end-line
     ((t (:foreground "#008ED1" :background "#002E41"))))

   '(mode-line-buffer-id ((t (:foreground "black" :bold t))))
   '(which-func ((t (:foreground "green")))))
)
(org-src-color-blocks-dark)
#+END_SRC

* Modes
#+BEGIN_SRC emacs-lisp
(require 'use-package)
;;; Enable ido mode
(use-package ido
  :init (ido-mode t))
(use-package cython-mode
  :mode (("\\.spyx" . cython-mode)
         ("\\.pyx" . cython-mode)))
#+END_SRC

I never write anything in Objective-C, but I do open plenty of Matlab files, so
make that the default.
#+BEGIN_SRC emacs-lisp
(add-to-list
  'auto-mode-alist
  '("\\.m$" . octave-mode))
#+END_SRC

Color Unix system files (https://wiki.archlinux.org/index.php/emacs#Syntax_Highlighting_for_Systemd_Files)

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
#+END_SRC

** ERC
#+BEGIN_SRC emacs-lisp
(require 'erc)

#+END_SRC

** Jabber client

#+BEGIN_SRC emacs-lisp
(require 'jabber)
(setq jabber-account-list
    '(("joris.vankerschaver@gmail.com" 
       (:network-server . "talk.google.com")
       (:connection-type . ssl))))
#+END_SRC

** Coding modes

#+BEGIN_SRC emacs-lisp
(setq tags-table-list '("~/.etags"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face empty tabs tab-mark lines-tail))
(defun coding-hook ()
  "Enable things that are convenient across all coding buffers."
  (column-number-mode t)
  (setq indent-tabs-mode nil)
  ;; (auto-fill-mode)
  (whitespace-mode)
  (hungry-delete-mode)
  ;; (flycheck-mode)
  ;; (fci-mode)
  )

(add-hook 'c-mode-common-hook   'coding-hook)
(add-hook 'sh-mode-hook         'coding-hook)
(add-hook 'js-mode-hook         'coding-hook)
(add-hook 'java-mode-hook       'coding-hook)
(add-hook 'lisp-mode-hook       'coding-hook)
(add-hook 'emacs-lisp-mode-hook 'coding-hook)
(add-hook 'makefile-mode-hook   'coding-hook)
(add-hook 'latex-mode-hook      'coding-hook)
(add-hook 'python-mode-hook     'coding-hook)

;;; Python-specific customizations.
(add-hook 'python-mode-hook     'flycheck-mode)

;; Haskell mode
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)

;; Golang
(require 'go-mode)
(add-hook 'go-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'gofmt-before-save)
            (setq tab-width 4)
            (setq indent-tabs-mode 1)))

;; C/C++ customizations.
(defun c-hook ()
  "Styling for C and C++ modes."
  (c-toggle-auto-hungry-state t)
  (c-set-style "stroustrup")
  (setq c-basic-offset 4)
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'inline-open 0))

(add-hook 'c-mode-hook   'c-hook)
(add-hook 'c++-mode-hook 'c-hook)
#+END_SRC

Run nosetests from within Emacs (taken from [[https://bitbucket.org/durin42/nosemacs]])

#+BEGIN_SRC emacs-lisp
(require 'nose)
(add-hook 'python-mode-hook
          (lambda ()
            (local-set-key "\C-ca" 'nosetests-all)
            (local-set-key "\C-cm" 'nosetests-module)
            (local-set-key "\C-c." 'nosetests-one)
            (local-set-key "\C-cpa" 'nosetests-pdb-all)
            (local-set-key "\C-cpm" 'nosetests-pdb-module)
            (local-set-key "\C-cp." 'nosetests-pdb-one)))
#+END_SRC

Autocomplete for Python.

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)                 ; optional

; jedi:after-change-handler seems to cause buffer corruption, disable it.
; See https://github.com/tkf/emacs-jedi/issues/234
;     https://debbugs.gnu.org/cgi/bugreport.cgi?bug=20440
(add-hook 'jedi-mode-hook
          (lambda () (remove-hook 'after-change-functions
                                  'jedi:after-change-handler t)))

#+END_SRC

** Latex setup.

Aangepast van [[http://www.jesshamrick.com/2013/03/31/macs-and-emacs/]]. Forward
search from PDF to LaTeX document is gebaseerd op
[[http://www.cs.berkeley.edu/~prmohan/emacs/latex.html]]. Voor backward search
gebruik ik Skim, en stel ik de editor in de preferences in als
'/usr/local/bin/emacsclient' met als opties '--no-wait +%line "%file"'

#+BEGIN_SRC emacs-lisp
(require 'tex-site)
(use-package tex-site
  :init
  (progn
    (setq LaTeX-command "latex -synctex=1")
    (setq TeX-PDF-mode t)
    (setq TeX-view-program-list
          (quote
           (("Skim"
             (concat "/Applications/Skim.app/"
                     "Contents/SharedSupport/displayline"
                     " %n %o %b")))))
    (setq TeX-view-program-selection
          (quote (
                  (output-pdf "Skim")
                  )))
    (setq TeX-source-correlate-method 'synctex)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)))
#+END_SRC

* Org-mode

This is a hodge-podge of options that I mostly copy-pasted from elsewehere.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq-default indent-tabs-mode nil)))

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "PENDING" "|" "DONE" "CANCELLED")))
(setq org-todo-keyword-faces
          '(("TODO" . (:foreground "red"))
            ("IN-PROGRESS" . (:foreground "orange"))
            ("PENDING" . (:foreground "yellow"))
            ("DONE" . (:foreground "green"))
            ("CANCELLED" . (:foreground "lightblue"))))

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
   (python . t)
   (R . t)
   (ruby . t)
   (sqlite . t)
   (perl . t)
   ))

(setq org-src-fontify-natively t)

(require 'org-install)  ;; What does this do again?
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(setq org-log-done t)

(setq org-base-folder (expand-file-name "~/Dropbox/org-documents/"))
(setq org-default-notes-file (concat org-base-folder "/notes.org"))

(setq my-tasks-file
      (concat (file-name-as-directory org-base-folder) "tasks-2015.org"))
(setq my-unsorted-tasks-file
      (concat (file-name-as-directory org-base-folder) "unsorted-tasks.org"))
(setq my-journal-file
      (concat (file-name-as-directory org-base-folder) "journal.org"))

(define-key global-map "\C-cc" 'org-capture)

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline my-unsorted-tasks-file "Tasks")
             "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree my-journal-file)
             "* %?\nEntered on %U\n  %i\n  %a")))

; Visit org files that I use a lot.
(global-set-key [f3]
                (lambda () (interactive)
                  (find-file my-tasks-file)))
(global-set-key [f4]
                (lambda () (interactive)
                  (find-file my-unsorted-tasks-file)))

; org clock mode.
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

#+END_SRC

* Miscellaneous elisp snippets.

Rename buffer and file it's visiting; taken from [[ http://steve.yegge.googlepages.com/my-dot-emacs-file]]

#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file name new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+END_SRC
